package com.bham.pij.assignments.calculator;
import java.util.ArrayList;

public class Calculator {
	 float number, nextNumber;
	    String[]  userInput;
	    float result, leftResult , rightResult, tempResult;
	    ArrayList<Float> memory = new ArrayList();
	    ArrayList<Float> history = new ArrayList();
	    ArrayList<Float> numbers = new ArrayList();
	    ArrayList<String> op = new ArrayList();
	
	public Calculator() {}//constructor

public float evaluate(String expression) {
	if (expression.equals("m"))
    	setMemoryValue(history.get(history.size()-1));
    else if (expression.equals("mr"))
        System.out.println(getCurrentValue());

    else if (expression.equals("c"))
        clearMemory();
    else if (expression.equals("h"))
        printHistory();
    else  {
	userInput = expression.split(" ");
	if (userInput.length==3) {
		if (userInput[1].equals("+")) {
            number = Float.valueOf(userInput[0]);
            nextNumber = Float.valueOf(userInput[2]);
            result = number + nextNumber;
        } // + & length = 3
        else if (userInput[2].equals("-")) {
            number = Float.valueOf(userInput[0]);
            nextNumber = Float.valueOf(userInput[1]);
            result = number - nextNumber;
        }// - & length = 3
        else if (userInput[1].equals("*")) {
            number = Float.valueOf(userInput[0]);
            nextNumber = Float.valueOf(userInput[2]);
            result = number * nextNumber;
        }// * & length = 3
        else if (userInput[1].equals("/")) {
            number = Float.valueOf(userInput[0]);
            nextNumber = Float.valueOf(userInput[2]);
            if (nextNumber!=0) {
                result = number / nextNumber;}
            else {
                result = Float.MIN_VALUE;}
            }// / & length 3
	
	}// if length check
	else if (userInput.length>3) {
		if (expression.contains("(")) {
			number = Float.valueOf(userInput[0].substring(1));
            nextNumber = Float.valueOf(userInput[2].substring(0,userInput[2].length()-1));
            if (userInput[1].equals("+")) {
            	leftResult = number + nextNumber;
            }// >3 & () & +
            else if (userInput[1].equals("-")) {
            	leftResult = number - nextNumber;
            }// >3 & () & -
            else if (userInput[1].equals("/")) {
            	if (nextNumber ==0) {
            		leftResult= Float.MIN_VALUE;
            	}else
            	leftResult = number / nextNumber;
            }// >3 & () & /
            else if (userInput[1].equals("*")) {
            	leftResult = number * nextNumber;
            }// >3 & () & *
            number = Float.valueOf(userInput[4].substring(1));
            nextNumber = Float.valueOf(userInput[6].substring(0,userInput[2].length()-1));
            if (userInput[5].equals("+")) {
            	rightResult = number + nextNumber;
            }// >3 & () & +
            else if (userInput[5].equals("-")) {
            	rightResult = number - nextNumber;
            }// >3 & () & -
            else if (userInput[5].equals("/")) {
            	if (nextNumber ==0) {
            		rightResult= Float.MIN_VALUE;
            	}else
            	rightResult = number / nextNumber;
            	
            }// >3 & () & /
            else if (userInput[5].equals("*")) {
            	rightResult = number * nextNumber;
            }// >3 & () & *
            if (userInput[3].equals("+")) {
                result = leftResult+rightResult;}
            else if (userInput[3].equals("/")) {
                if (rightResult!=0) {
                	
                    result = leftResult / rightResult;}
                else {
                    result = Float.MIN_VALUE;
                }
                result = leftResult/rightResult;}
            else if (userInput[3].equals("-")) {
                result = leftResult-rightResult;}
            else if (userInput[3].equals("*")) {
                result = leftResult*rightResult;}
            
		}// () check
		else {
			for (int i=0;i<userInput.length;i++) {
				if (floatCheck(userInput[i])) {
					numbers.add(Float.valueOf(userInput[i]));
					
				}//float check
				else {
					if ((userInput[i].equals("*"))||(userInput[i].equals("/"))) {
						if (userInput[i].equals("*")) {
							number =numbers.get(i-1);
							nextNumber =Float.valueOf(userInput[i+1]);
							tempResult = number* nextNumber;
							numbers.set(i+1, tempResult);
							
						}// *
						else if (userInput[i].equals("/")) {
							number =numbers.get(i-1);
							nextNumber =Float.valueOf(userInput[i+1]);
							tempResult = number/ nextNumber;
							numbers.set(i+1, tempResult);
							System.out.println(numbers);
							
						}// /
							
					
					}// * * / check
					
					else {
						op.add(userInput[i]);
					}// else
				}// operators 
				
			}//for >3 no()
			for (int i =0; i<op.size();i++) {
			

				if (op.get(i).equals("+"));{
				
					number =numbers.get(i);
					nextNumber=numbers.get(i+1);
					result = number+nextNumber;
					System.out.println(number);
					numbers.set(i+1, result);
					
					
					
				}// + 
				 if (op.get(i).equals("-")){
					result = number-nextNumber;
					numbers.set(i+1, result);
					
				}// - 
				
			}//for operators
			result = numbers.get(numbers.size()-1);
		}
	}// else if length >3
	else if (userInput.length==2) {
		   if (userInput[0].equals("+")) {
               number = Float.valueOf(userInput[1]);
               result = memory.get(memory.size()-1)+ number;
           }// memory +
           if (userInput[0].equals("-")) {
               number = Float.valueOf(userInput[1]);
               result = memory.get(memory.size()-1)- number;
           }// memory -
           if (userInput[0].equals("*")) {
               number = Float.valueOf(userInput[1]);
               result = memory.get(memory.size()-1)* number;
           }// memory *
           if (userInput[0].equals("/")) {
               number = Float.valueOf(userInput[1]);
               result = memory.get(memory.size()-1)/ number;
           }// memory /
	}// length ==2 i.g   + 8
	history.add(result);
    }
	return result;
	}//evaluate method
public void clearMemory() {
    memory.clear();
}
public float getCurrentValue() {
    if (history.isEmpty()) {
        return 0;}
    else {
        return history.get(history.size()-1);}
}
public float getMemoryValue() {
    if (memory.isEmpty()) {
        return 0;}
    else {
        return memory.get(memory.size()-1);}


}
public void setMemoryValue(float memval) {
    memory.add(memval);
}
public float getHistoryValue(int index) {
    if ((history.isEmpty())||(index>history.size()-1))
        return 0;
    return history.get(index);

}
public void printHistory() {
	history.remove(history.size()-1);
    for (float result: history) System.out.print(result+" ");
}
public boolean floatCheck(String element) {
	try {
		Float.parseFloat(element);
		return true;
	}catch(NumberFormatException e) {
		return false;
	}
	
	
}// check float method

}//class
